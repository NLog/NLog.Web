<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)NLog.dll" #>
<#@ assembly name="$(TargetDir)NLog.Extensions.Logging.dll" #>
<#@ assembly name="$(TargetDir)NLog.Web.AspNetCore.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
<# 
    //T4 templates are built in Visual Studio. See https://msdn.microsoft.com/en-us/library/bb126445.aspx
#>// 
// Copyright (c) 2004-2021 Jaroslaw Kowalski <jaak@jkowalski.net>, Kim Christensen, Julian Verdurmen
// 
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions 
// are met:
// 
// * Redistributions of source code must retain the above copyright notice, 
//   this list of conditions and the following disclaimer. 
// 
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution. 
// 
// * Neither the name of Jaroslaw Kowalski nor the names of its 
//   contributors may be used to endorse or promote products derived from this
//   software without specific prior written permission. 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
// 

namespace NLog.Web.Internal
{
    /// <summary>
    /// Provides logging interface and utility functions.
    /// </summary>
    internal static class AssemblyExtensionTypes
    {
        public static void RegisterTypes(this NLog.Config.ISetupExtensionsBuilder setupBuilder)
        {
            #pragma warning disable CS0618 // Type or member is obsolete
<#
    IEnumerable<Type> types = null;
    try
    {
        types = typeof(NLog.Web.NLogAspNetCoreOptions).Assembly.GetTypes().OrderBy(t => t.ToString());
    }
    catch (ReflectionTypeLoadException typeLoadException)
    {
        types = typeLoadException.Types?.Where(t => t != null)?.ToArray() ?? Array.Empty<Type>();
    }

    foreach(var type in types)
    {
        if (type.IsAbstract || type.IsPrimitive || !type.IsPublic)
            continue;

        if (typeof(NLog.Targets.Target).IsAssignableFrom(type))
        {
            var targetAttributes = type.GetCustomAttributes<NLog.Targets.TargetAttribute>(false);
            foreach (var targetAlias in targetAttributes)
            {
                var targetAliasName = targetAlias.Name;
#>
            setupBuilder.RegisterTarget<<#= type #>>("<#= targetAliasName #>");
<#
            }
        }
        else if (typeof(NLog.Layouts.Layout).IsAssignableFrom(type))
        {
            var layoutAttributes = type.GetCustomAttributes<NLog.Layouts.LayoutAttribute>(false);
            foreach (var layoutAlias in layoutAttributes)
            {
                var layoutAliasName = layoutAlias.Name;
#>
            setupBuilder.RegisterLayout<<#= type #>>("<#= layoutAliasName #>");
<#
            }
        }
        else if (typeof(NLog.LayoutRenderers.LayoutRenderer).IsAssignableFrom(type))
        {
            var layoutAttributes = type.GetCustomAttributes<NLog.LayoutRenderers.LayoutRendererAttribute>(false);
            foreach (var layoutAlias in layoutAttributes)
            {
                var layoutAliasName = layoutAlias.Name;
#>
            setupBuilder.RegisterLayoutRenderer<<#= type #>>("<#= layoutAliasName #>");
<#
            }

            var ambientAttributes = type.GetCustomAttributes<NLog.LayoutRenderers.AmbientPropertyAttribute>(false);
            foreach (var layoutAlias in ambientAttributes)
            {
                var layoutAliasName = layoutAlias.Name;
#>
            setupBuilder.RegisterAmbientRenderer<<#= type #>>("<#= layoutAliasName #>");
<#
            }
        }
    }
#>

#if NET5_0_OR_GREATER
            setupBuilder.RegisterLayoutRenderer<NLog.Web.LayoutRenderers.AspNetRequestHasPostedBodyLayoutRenderer>("aspnet-request-has-posted-body");
            setupBuilder.RegisterLayoutRenderer<NLog.Web.LayoutRenderers.AspNetRequestStreamIdLayoutRenderer>("aspnet-request-stream-id");
#endif
#if NETCOREAPP3_0_OR_GREATER
            setupBuilder.RegisterLayoutRenderer<NLog.Web.LayoutRenderers.AspNetRequestHttpTransportTypeLayoutRenderer>("aspnet-request-http-transport-type");
            setupBuilder.RegisterLayoutRenderer<NLog.Web.LayoutRenderers.AspNetRequestInherentKeepAliveLayoutRenderer>("aspnet-request-inherent-keep-alive");
            setupBuilder.RegisterLayoutRenderer<NLog.Web.LayoutRenderers.AspNetRequestTlsHandshakeLayoutRenderer>("aspnet-request-tls-handshake");
            setupBuilder.RegisterLayoutRenderer<NLog.Web.LayoutRenderers.AspNetRequestTlsTokenBindingLayoutRenderer>("aspnet-request-tls-token-binding");
            setupBuilder.RegisterLayoutRenderer<NLog.Web.LayoutRenderers.AspNetRequestTrailersLayoutRenderer>("aspnet-request-trailers");
            setupBuilder.RegisterLayoutRenderer<NLog.Web.LayoutRenderers.AspNetResponseTrailersLayoutRenderer>("aspnet-response-trailers");
            setupBuilder.RegisterLayoutRenderer<NLog.Web.LayoutRenderers.AspNetResponseHttpsCompressionLayoutRenderer>("aspnet-response-https-compression");
            setupBuilder.RegisterLayoutRenderer<NLog.Web.LayoutRenderers.AspNetRequestServerVariableLayoutRenderer>("aspnet-request-servervariable");
            setupBuilder.RegisterLayoutRenderer<NLog.Web.LayoutRenderers.AspNetRequestEndPointLayoutRenderer>("aspnet-request-endpoint");
#endif

            #pragma warning restore CS0618 // Type or member is obsolete
        }
    }
}